# Distinct Powers
#
# Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
#
# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125

# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct
# terms:
#
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
#
# How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100 ?

"""
Solution Approach :
===================
* Just another brute force algorithm
* Iterated over range from to a_max_cap and b_max_cap
* Added the power value to a set (with an initial value of 0)
* Returned the len of this set minus 1 (accounting for the initial value of 0)
"""


def distinct_powers(a, b):
    power_nums = {0}
    for i in range(2, a + 1):
        for j in range(2, b + 1):
            power_nums.add(i ** j)
    return len(power_nums) - 1


print(distinct_powers(100, 100))
